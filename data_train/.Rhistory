geom_density(col = "red")
+
install.packages("markovchain")
install.packages(c("backports", "Cairo", "callr", "compositions", "digest", "dplyr", "factoextra", "forecast", "fs", "gdtools", "glue", "greybox", "igraph", "isoband", "jsonlite", "lme4", "lubridate", "mclust", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "reshape2", "rlang", "robustbase", "smooth", "stringi", "survey", "tibble", "tidyselect", "tinytex", "vctrs", "xfun", "xml2"))
minmax.norm <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
# for (i in 1:ncol(dfnum)) {
#   for (j in 1:nrow(dfnum)) {
#     dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
#   }
# }
dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
# for (i in 1:ncol(dfnum)) {
#   for (j in 1:nrow(dfnum)) {
#     dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
#   }
# }
dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
rnorm(100)
t <- rnorm(100)
minmax.norm(t)
t <- as_tibble(rnorm(100))
minmax.norm(t)
t1 <- minmax.norm(t)
# Min-Max Normalization, Keep = 'Variable', for Numeric variable
# to not be transformed
minmax.norm <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
t2 <- minmax.norm(t)
t2
t1 == t2
t1 - t2
# Min-Max Normalization, Keep = 'Variable', for Numeric variable
# to not be transformed
minmax.norm1 <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
# Min-Max Normalization, Keep = 'Variable', for Numeric variable
# to not be transformed
minmax.norm1 <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
minmax.norm2 <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
# for (i in 1:ncol(dfnum)) {
#   for (j in 1:nrow(dfnum)) {
#     dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
#   }
# }
dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
# for (i in 1:ncol(dfnum)) {
#   for (j in 1:nrow(dfnum)) {
#     dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
#   }
# }
dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
t <- rnorm(10)
t1 <- rnorm(100)
t2 <- rnorm(1000)
minmax.norm1(t)
minmax.norm1(tibble(t))
minmax.norm2(tibble(t))
minmax.norm2(tibble(t)) - minmax.norm1(tibble(t))
options(digits = 5)
minmax.norm2(tibble(t)) - minmax.norm1(tibble(t))
minmax.norm1(tibble(t))
minmax.norm2(tibble(t))
minmax.norm2(tibble(t)) - minmax.norm1(tibble(t))
t
mean(minmax.norm2(tibble(t1)) - minmax.norm1(tibble(t2)))
mean(minmax.norm2(tibble(t2)) - minmax.norm1(tibble(t2)))
mean(minmax.norm2(tibble(t2)) - minmax.norm1(tibble(t1)))
mean(minmax.norm2(tibble(t1)) - minmax.norm1(tibble(t1)))
mean(minmax.norm2(tibble(t1)) == minmax.norm1(tibble(t1)))
mean(minmax.norm2(tibble(t2)) == minmax.norm1(tibble(t2)))
mean(minmax.norm2(tibble(t3)) == minmax.norm1(tibble(t3)))
mean(minmax.norm2(tibble(t)) == minmax.norm1(tibble(t)))
t3 <- rnorm(10000)
mean(minmax.norm2(tibble(t3)) == minmax.norm1(tibble(t3)))
mean(minmax.norm2(tibble(t3)) == minmax.norm1(tibble(t3)))
install.packages('scheduler')
install.packages('taskscheduleR')
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
version
install.packages('benchmarkme')
library(benchmarkme)
res <- benchmark_std(runs = 3)
plot(res)
benchmarkme::get_cpu()
getwd()
library(parallel)
detectCores()
detectCores(logical = F)
install.packages('moderndive')
library(geoquimica)
?geoquimica
??geoquimica
library(stats)
rbinom(1000,10,0.1)
m=1000
n=10
p=0.1
a=rbinom(m,n,p)
table(a)
temp=c(a,seq(0,n))
temp2=table(temp)-1
temp2
rbinom(1000,10,0.5)
m=1000
n=10
p=0.5
a=rbinom(m,n,p)
table(a)
temp=c(a,seq(0,n))
temp3=table(temp)-1
temp3
rbinom(1000,10,0.9)
m=1000
n=10
p=0.9
a=rbinom(m,n,p)
table(a)
temp=c(a,seq(0,n))
temp4=table(temp)-1
temp4
rbind (temp2, temp3, temp4)
u <- rbind (temp2, temp3, temp4)
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade")
legend("topleft",
legend = levels(u),
fill = cols,
bty = "n")
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade")
legend("topleft",
legend = levels(u),
fill = cols,
bty = "n")
box(bty = "L")
class(u)
names(u)
u <- rbind(temp2, temp3, temp4)
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade")
legend("topleft",
legend = levels(u),
fill = cols,
bty = "n")
head(u)
rbind (temp2, temp3, temp4)
as.data.frame(rbind(temp2, temp3, temp4))
u$name <- rownames(u)
View(u)
u$name <- rownames(as.data.frame(u))
View(u)
u <- rbind(temp2, temp3, temp4)
u$name <- rownames(as.data.frame(u))
View(u)
library(data.table)
u <- rbind(temp2, temp3, temp4)
library(data.table)
u <- setDT(u,keep.rownames = TRUE)
u <- setDT(data.frame(u),keep.rownames = TRUE)
View(u)
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade")
barplot(u[2:12],
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade")
View(u)
library(stats)
rbinom(1000,10,0.1)
m=1000
n=10
p=0.1
a=rbinom(m,n,p)
table(a)
temp=c(a,seq(0,n))
temp2=table(temp)-1
temp2
rbinom(1000,10,0.5)
m=1000
n=10
p=0.5
a=rbinom(m,n,p)
table(a)
temp=c(a,seq(0,n))
temp3=table(temp)-1
temp3
rbinom(1000,10,0.9)
m=1000
n=10
p=0.9
a=rbinom(m,n,p)
table(a)
temp=c(a,seq(0,n))
temp4=table(temp)-1
temp4
rbind (temp2, temp3, temp4)
u <- rbind (temp2, temp3, temp4)
rbind (temp2, temp3, temp4,deparse.level = 1)
rbind (temp2, temp3, temp4,deparse.level = 2)
rbind (temp2, temp3, temp4,deparse.level = 1)
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade")
legend("topleft",
legend = levels(row.names(u)),
fill = cols,
bty = "n")
legend("topleft",
legend = levels(u),
fill = cols,
bty = "n")
box(bty = "L")
set.seed(1)
rbinom(1000,10,0.1)
m=1000
n=10
p=0.1
a=rbinom(m,n,p)
table(a)
temp=c(a,seq(0,n))
temp2=table(temp)-1
temp2
rbinom(1000,10,0.5)
m=1000
n=10
p=0.5
a=rbinom(m,n,p)
table(a)
temp=c(a,seq(0,n))
temp3=table(temp)-1
temp3
rbinom(1000,10,0.9)
m=1000
n=10
p=0.9
a=rbinom(m,n,p)
table(a)
temp=c(a,seq(0,n))
temp4=table(temp)-1
temp4
rbind (temp2, temp3, temp4,deparse.level = 1)
u <- rbind (temp2, temp3, temp4)
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade")
legend("topleft",
legend = levels(u),
fill = cols,
bty = "n")
box(bty = "L")
levels(u)
row.names(u)
legend("topleft",
legend = row.names(u),
fill = cols,
bty = "n")
legend("topleft",
legend = row.names(u),
fill = row.names(u),
bty = "n")
legend("topleft",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
box(bty = "L")
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade",col = c('red','blue','green'))
legend("topleft",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
box(bty = "L")
legend("bottom",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade",col = c('red','blue','green'))
legend("bottom",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
box(bty = "L")
legend("lower",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
legend("topleft",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
legend("topright",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade",col = c('red','blue','green'))
legend("topright",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
box(bty = "L")
u <- rbind(temp2, temp3, temp4,deparse.level = 1)
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade",col = c('red','blue','green'))
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade",col = c('red','blue','green'))
u <- rbind(temp2, temp3, temp4,deparse.level = 1)
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade",col = c('red','blue','green'))
legend("topright",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
box(bty = "L")
box(bty = "L",lty = 'L')
box(bty = "L")
barplot(u,
beside = TRUE,
xlab = "Valores",
ylab = "função de probabilidade",col = c('red','blue','green'))
legend("topright",
legend = row.names(u),
fill = c('red','blue','green'),
bty = "n")
box(bty = "L")
library(tidyverse)
setwd('~/GitHub/MinChem_Modeller/data_train')
fromSMOTE <- read.csv('SMOTE_Random_Sampler_v2.csv',)
t <- fromSMOTE %>%
group_by(GROUP, MINERAL) %>%
count()
sort(unique(t$MINERAL))
table(t$GROUP, t$MINERAL)
View(t)
