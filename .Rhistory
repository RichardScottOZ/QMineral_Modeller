feld <- feld %>%
bind_cols(feld.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(feld$MINERAL, feld$outlier_db)
feld <- feld %>%
filter(outlier_db != 'outlier')
remove(feld.db)
# Remove outlier from Feldspathoid ----
foid <- min %>%
filter(GROUP == 'FELDSPATHOID')
dbscan::kNNdistplot(foid %>%
select(4:25), k = 5)
abline(h = 5, lty = 2)
foid.db <- dbscan::dbscan(foid %>%
select(4:25),eps = 5,minPts = 5)
# Visualization
# fviz_cluster(object = foid.db,
#              data =  foid %>%
#                select(25:36),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
foid <- foid %>%
bind_cols(foid.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(foid$MINERAL, foid$outlier_db)
foid <- foid %>%
filter(outlier_db != 'outlier')
remove(foid.db)
# Remove outlier from Garnet ----
gart <- min %>%
filter(GROUP == 'GARNET')
dbscan::kNNdistplot(gart %>%
select(4:25), k = 5)
abline(h = 3, lty = 2)
gart.db <- dbscan::dbscan(gart %>%
select(4:25),eps = 3,minPts = 5)
# Visualization
# fviz_cluster(object = gart.db,
#              data =  gart %>%
#                select(25:37),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
gart <- gart %>%
bind_cols(gart.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(gart$MINERAL, gart$outlier_db)
gart <- gart %>%
filter(outlier_db != 'outlier')
remove(gart.db)
# Remove outlier from Ilmenite ----
ilm <- min %>%
filter(GROUP == 'ILMENITE')
dbscan::kNNdistplot(ilm %>%
select(4:25), k = 5)
abline(h = 4, lty = 2)
ilm.db <- dbscan::dbscan(ilm %>%
select(4:25),eps = 4,minPts = 5)
# Visualization
# fviz_cluster(object = ilm.db,
#              data =  ilm %>%
#                select(25:34),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
ilm <- ilm %>%
bind_cols(ilm.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(ilm$MINERAL, ilm$outlier_db)
ilm <- ilm %>%
filter(outlier_db != 'outlier')
remove(ilm.db)
# Remove outlier from Mica ----
mica <- min %>%
filter(GROUP == 'MICA')
dbscan::kNNdistplot(mica %>%
select(4:25), k = 5)
abline(h = 5, lty = 2)
mica.db <- dbscan::dbscan(mica %>%
select(4:25),eps = 5,minPts = 5)
# Visualization
# fviz_cluster(object = mica.db,
#              data =  mica %>%
#                select(25:39),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
mica <- mica %>%
bind_cols(mica.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(mica$MINERAL, mica$outlier_db)
mica <- mica %>%
filter(outlier_db != 'outlier')
remove(mica.db)
# Remove outlier from Olivine ----
oliv <- min %>%
filter(GROUP == 'OLIVINE')
dbscan::kNNdistplot(oliv %>%
select(4:25), k = 5)
abline(h = 2, lty = 2)
oliv.db <- dbscan::dbscan(oliv %>%
select(4:25),eps = 2,minPts = 5)
# Visualization
# fviz_cluster(object = oliv.db,
#              data =  oliv %>%
#                select(25:36),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
oliv <- oliv %>%
bind_cols(oliv.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(oliv$MINERAL, oliv$outlier_db)
oliv <- oliv %>%
filter(outlier_db != 'outlier')
remove(oliv.db)
# Remove outlier from Perovskite ----
pero <- min %>%
filter(GROUP == 'PEROVSKITE')
dbscan::kNNdistplot(pero %>%
select(4:25), k = 5)
abline(h = 3, lty = 2)
pero.db <- dbscan::dbscan(pero %>%
select(4:25),eps = 3,minPts = 5)
# Visualization
# fviz_cluster(object = pero.db,
#              data =  pero %>%
#                select(25:35),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
pero <- pero %>%
bind_cols(pero.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(pero$MINERAL, pero$outlier_db)
pero <- pero %>%
filter(outlier_db != 'outlier')
remove(pero.db)
# Remove outlier from Pyroxene ----
px <- min %>%
filter(GROUP == 'PYROXENE')
dbscan::kNNdistplot(px %>%
select(4:25), k = 5)
abline(h = 3, lty = 2)
px.db <- dbscan::dbscan(px %>%
select(4:25),eps = 3,minPts = 5)
# Visualization
# fviz_cluster(object = px.db,
#              data =  px %>%
#                select(25:35),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
px <- px %>%
bind_cols(px.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(px$MINERAL, px$outlier_db)
px <- px %>%
filter(outlier_db != 'outlier')
remove(px.db)
# Remove outlier from Quartz ----
qtz <- min %>%
filter(GROUP == 'QUARTZ')
dbscan::kNNdistplot(qtz %>%
select(4:25), k = 5)
abline(h = 2, lty = 2)
qtz.db <- dbscan::dbscan(qtz %>%
select(4:25),eps = 2,minPts = 5)
# Visualization
# fviz_cluster(object = qtz.db,
#              data =  qtz %>%
#                select(25:34),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
qtz <- qtz %>%
bind_cols(qtz.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(qtz$MINERAL, qtz$outlier_db)
qtz <- qtz %>%
filter(outlier_db != 'outlier')
remove(qtz.db)
# Remove outlier from Spinel ----
spn <- min %>%
filter(GROUP == 'SPINEL')
dbscan::kNNdistplot(spn %>%
select(4:25), k = 5)
abline(h = 5, lty = 2)
spn.db <- dbscan::dbscan(spn %>%
select(4:25),eps = 5,minPts = 5)
# Visualization
# fviz_cluster(object = spn.db,
#              data =  spn %>%
#                select(25:34),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
spn <- spn %>%
bind_cols(spn.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(spn$MINERAL, spn$outlier_db)
spn <- spn %>%
filter(outlier_db != 'outlier')
remove(spn.db)
# Remove outlier from Sulfide ----
sulf <- min %>%
filter(GROUP == 'SULFIDE')
dbscan::kNNdistplot(sulf %>%
select(4:25), k = 5)
abline(h = 3000, lty = 2)
sulf.db <- dbscan::dbscan(sulf %>%
select(4:25),eps = 3000,minPts = 5)
# Visualization
# fviz_cluster(object = sulf.db,
#              data =  sulf %>%
#                select(29,30,39:45),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
sulf <- sulf %>%
bind_cols(sulf.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(sulf$MINERAL, sulf$outlier_db)
sulf <- sulf %>%
filter(outlier_db != 'outlier')
remove(sulf.db)
# Remove outlier from Titanite ----
titn <- min %>%
filter(GROUP == 'TITANITE')
dbscan::kNNdistplot(titn %>%
select(4:25), k = 5)
abline(h = 8, lty = 2)
titn.db <- dbscan::dbscan(titn %>%
select(4:25),eps = 8,minPts = 5)
# Visualization
# fviz_cluster(object = titn.db,
#              data =  titn %>%
#                select(25:39),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
titn <- titn %>%
bind_cols(titn.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(titn$MINERAL, titn$outlier_db)
titn <- titn %>%
filter(outlier_db != 'outlier')
remove(titn.db)
# Remove outlier from Zircon ----
zirc <- min %>%
filter(GROUP == 'ZIRCON')
dbscan::kNNdistplot(zirc %>%
select(4:25), k = 5)
abline(h = 1, lty = 2)
zirc.db <- dbscan::dbscan(zirc %>%
select(4:25),eps = 1,minPts = 5)
# Visualization
# fviz_cluster(object = zirc.db,
#              data =  zirc %>%
#                select(25:26,46),
#              geom = 'point',
#              stand = TRUE,
#              show.clust.cent = FALSE,)
zirc <- zirc %>%
bind_cols(zirc.db$cluster) %>%
rename(outlier_db = '...26') %>%
mutate(outlier_db = ifelse(outlier_db == 0,'outlier','regular data'))
# table(zirc$MINERAL, zirc$outlier_db)
zirc <- zirc %>%
filter(outlier_db != 'outlier')
remove(zirc.db)
# Joining data ----
min1 <- amph %>%
bind_rows(apat, carb, clay, feld, foid,
gart,ilm,mica, oliv, pero, px,
qtz, spn, sulf, titn, zirc)
# Writing data ----
write.csv(file = 'data_input/minerals_posDBScan.csv',x = min1[,-1])
# End of benchmarking script
tac <- Sys.time() # Closing time
print(paste((nrow(min) - nrow(min1)),'outliers removed from',nrow(min),'samples:',(round(nrow(min1)/nrow(min),2)),'%'))
print(paste('Running time:', # Printing running time
round(difftime(time1 = tac,
time2 = tic,
units = 'mins'),digits = 2),
'minutes'))
setwd("~/GitHub/MinChem_Modeller") # Ajustando o work direction
set.seed(123) # Ajustando o 'Random State' da maquina para reproduzir os codigos
library(tidyverse) # Conjunto de bibliotecas em R que facilitam a manipulação e visualização de dados. Equivalente ao pandas, matplotlib, seaborn, etc
library(dbscan) # outlier detection
library(factoextra) # Cluster viz
library(smotefamily)
library(data.table)
pyroxene <- read_csv('data_input/pyroxene.csv') %>%
select(-id)
sel <- names(pyroxene)
min <- read_csv('data_input/minerals_posDBScan.csv',na = 'NA') %>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
mutate(AS_ppm = ifelse(AS_ppm > 100, AS_ppm/10000, # Adjusting values of column
ifelse(AS_ppm > 50, AS_ppm/10, AS_ppm))) %>%
mutate(AS = AS_ppm, AS_ppm = NULL, # Rename columns
ROCK = `ROCK NAME`, `ROCK NAME` = NULL,
SAMPLE = `SAMPLE NAME`, `SAMPLE NAME` = NULL) %>%
select(all_of(sel))
min <- read_csv('data_input/minerals_posDBScan.csv',na = 'NA') %>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
# mutate(AS_ppm = ifelse(AS_ppm > 100, AS_ppm/10000, # Adjusting values of column
#                        ifelse(AS_ppm > 50, AS_ppm/10, AS_ppm))) %>%
# mutate(AS = AS_ppm, AS_ppm = NULL, # Rename columns
#        ROCK = `ROCK NAME`, `ROCK NAME` = NULL,
#        SAMPLE = `SAMPLE NAME`, `SAMPLE NAME` = NULL) %>%
select(all_of(sel))
min <- read_csv('data_input/minerals_posDBScan.csv',na = 'NA') %>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
# mutate(AS_ppm = ifelse(AS_ppm > 100, AS_ppm/10000, # Adjusting values of column
#                        ifelse(AS_ppm > 50, AS_ppm/10, AS_ppm))) %>%
# mutate(AS = AS_ppm, AS_ppm = NULL, # Rename columns
#        ROCK = `ROCK NAME`, `ROCK NAME` = NULL,
#        SAMPLE = `SAMPLE NAME`, `SAMPLE NAME` = NULL) %>%
select(all_of(sel[,-c('SAMPLE','ROCK')]))
sel
sel <- names(pyroxene) %>%
filter(-"X1",'SAMPLE','ROCK')
sel <- sel[-'ROCK']
sel <- sel[,-'ROCK']
sel
sel[1]
sel[2]
sel[1:3]
sel[-1]
sel[-1:2]
sel[-1,-2]
sel[c(-1,-2)]
sel[c(-1,-2,-5)]
sel <- sel[c(-'ROCK')]
sel <- sel[c(-1,-2,-5)]
min <- read_csv('data_input/minerals_posDBScan.csv',na = 'NA') %>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
# mutate(AS_ppm = ifelse(AS_ppm > 100, AS_ppm/10000, # Adjusting values of column
#                        ifelse(AS_ppm > 50, AS_ppm/10, AS_ppm))) %>%
# mutate(AS = AS_ppm, AS_ppm = NULL, # Rename columns
#        ROCK = `ROCK NAME`, `ROCK NAME` = NULL,
#        SAMPLE = `SAMPLE NAME`, `SAMPLE NAME` = NULL) %>%
select(all_of(sel))
min <- min %>%
bind_rows(pyroxene)
View(pyroxene)
View(min)
min <- min %>%
bind_rows(pyroxene) %>%
select(-ROCK, -SAMPLE,-X1)
remove(pyroxene, sel)
View(min)
min <- min %>%
group_by(MINERAL) %>%
sample_n(50, replace = TRUE) %>%
ungroup() %>%
distinct()
table(min$MINERAL)
toSMOTE <- min %>%
group_by(MINERAL) %>%
mutate(count = n()) %>%
filter(count >= 10) %>%
ungroup() %>%
select(-count) %>%
filter(MINERAL != "AMPHIBOLE",
MINERAL != "GARNET",
MINERAL != 'SULFIDE',
MINERAL != 'OLIVINE',
MINERAL != 'MONOSULFIDE SOLID SOLUTION',
MINERAL != 'MICA',
MINERAL != 'CLAY MINERAL') %>%
data.table()
toSMOTE <- min %>%
group_by(MINERAL) %>%
mutate(count = n()) %>%
filter(count >= 10) %>%
ungroup() %>%
select(-count) %>%
filter(MINERAL != "AMPHIBOLE",
MINERAL != "GARNET",
MINERAL != 'SULFIDE',
MINERAL != 'OLIVINE',
MINERAL != 'MONOSULFIDE SOLID SOLUTION',
MINERAL != 'MICA',
MINERAL != 'CLAY MINERAL') %>%
data.table()
View(toSMOTE)
View(toSMOTE)
table(toSMOTE)
table(toSMOTE$MINERAL)
toSMOTE[MINERAL == 'STILPNOMELANE', GROUP := 'STILPNOMELANE']
url <- 'https://www.dropbox.com/s/tpts55k1imhvt30/minerals_posDBScan.csv?dl=0'
min <- read_csv(url,na = 'NA') %>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
# mutate(AS_ppm = ifelse(AS_ppm > 100, AS_ppm/10000, # Adjusting values of column
#                        ifelse(AS_ppm > 50, AS_ppm/10, AS_ppm))) %>%
# mutate(AS = AS_ppm, AS_ppm = NULL, # Rename columns
#        ROCK = `ROCK NAME`, `ROCK NAME` = NULL,
#        SAMPLE = `SAMPLE NAME`, `SAMPLE NAME` = NULL) %>%
select(all_of(sel))
sel <- names(pyroxene)
sel <- sel[c(-1,-2,-5)]
pyroxene <- read_csv('data_input/pyroxene.csv') %>%
select(-id)
sel <- names(pyroxene)
sel <- sel[c(-1,-2,-5)]
min <- read_csv(url,na = 'NA') %>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
# mutate(AS_ppm = ifelse(AS_ppm > 100, AS_ppm/10000, # Adjusting values of column
#                        ifelse(AS_ppm > 50, AS_ppm/10, AS_ppm))) %>%
# mutate(AS = AS_ppm, AS_ppm = NULL, # Rename columns
#        ROCK = `ROCK NAME`, `ROCK NAME` = NULL,
#        SAMPLE = `SAMPLE NAME`, `SAMPLE NAME` = NULL) %>%
select(all_of(sel))
min <- read_csv(url,na = 'NA') #%>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
View(min)
url <- 'https://www.dropbox.com/s/tpts55k1imhvt30/minerals_posDBScan.csv?dl=1'
min <- read_csv(url,na = 'NA') #%>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
pyroxene <- read_csv('data_input/pyroxene.csv') %>%
select(-id)
sel <- names(pyroxene)
sel <- sel[c(-1,-2,-5)]
min <- read_csv(url,na = 'NA') %>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
# mutate(AS_ppm = ifelse(AS_ppm > 100, AS_ppm/10000, # Adjusting values of column
#                        ifelse(AS_ppm > 50, AS_ppm/10, AS_ppm))) %>%
# mutate(AS = AS_ppm, AS_ppm = NULL, # Rename columns
#        ROCK = `ROCK NAME`, `ROCK NAME` = NULL,
#        SAMPLE = `SAMPLE NAME`, `SAMPLE NAME` = NULL) %>%
select(all_of(sel))
#####
# Data to SMOTE pos DBScan
#
#
# version: 0.1
#
# Last modifications: * DBscan to remove outliers group by group
#                     * Recode mineral names according to IMA
#                     * Exclude non-minerals and irrelevant data from database
#
#
#
# -----
# Amphiboles, Apatites, Carbonates, Clay Minerals, Feldspars, Feldspathoides,
# Garnets, Ilmenites, Micas, Olivines, Perovskites, Pyroxenes, Quartz, Sulfides,
# Titanite, Zircon
# -----
# Guilherme Ferreira, (guilherme.ferreira@cprm.gov.br)
# December, 2020
#####
#####
# Setting up the enviroment
#####
setwd("~/GitHub/MinChem_Modeller") # Ajustando o work direction
url <- 'https://www.dropbox.com/s/tpts55k1imhvt30/minerals_posDBScan.csv?dl=1'
set.seed(123) # Ajustando o 'Random State' da maquina para reproduzir os codigos
#####
#Import Packages
#####
library(tidyverse) # Conjunto de bibliotecas em R que facilitam a manipulação e visualização de dados. Equivalente ao pandas, matplotlib, seaborn, etc
library(dbscan) # outlier detection
library(factoextra) # Cluster viz
library(smotefamily)
library(data.table)
#####
# DATA WRANGLING
#####
pyroxene <- read_csv('data_input/pyroxene.csv') %>%
select(-id)
sel <- names(pyroxene)
sel <- sel[c(-1,-2,-5)]
min <- read_csv(url,na = 'NA') %>% # importar o arquivo amphiboles.csv para um arquivo temporÃ¡rio df1
# mutate(AS_ppm = ifelse(AS_ppm > 100, AS_ppm/10000, # Adjusting values of column
#                        ifelse(AS_ppm > 50, AS_ppm/10, AS_ppm))) %>%
# mutate(AS = AS_ppm, AS_ppm = NULL, # Rename columns
#        ROCK = `ROCK NAME`, `ROCK NAME` = NULL,
#        SAMPLE = `SAMPLE NAME`, `SAMPLE NAME` = NULL) %>%
select(all_of(sel))
min <- min %>%
bind_rows(pyroxene) %>%
select(-ROCK, -SAMPLE,-X1)
remove(pyroxene, sel)
min <- min %>%
group_by(MINERAL) %>%
sample_n(50, replace = TRUE) %>%
ungroup() %>%
distinct()
table(min$MINERAL)
toSMOTE <- min %>%
group_by(MINERAL) %>%
mutate(count = n()) %>%
filter(count >= 10) %>%
ungroup() %>%
select(-count) %>%
filter(MINERAL != "AMPHIBOLE",
MINERAL != "GARNET",
MINERAL != 'SULFIDE',
MINERAL != 'OLIVINE',
MINERAL != 'MONOSULFIDE SOLID SOLUTION',
MINERAL != 'MICA',
MINERAL != 'CLAY MINERAL') %>%
data.table()
table(toSMOTE$MINERAL)
toSMOTE[MINERAL == 'STILPNOMELANE', GROUP := 'STILPNOMELANE']
write.csv(x = toSMOTE,file = 'data_input/SMOTE/toSMOTE_posDBscan.csv')
