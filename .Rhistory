a <- rnorm(n = 1000, mean = 0, sd = .1)
shapiro.test(a)
density(a)
qqplot(a)
qqplot(a, y = a)
qqplot(a, y = "norm")
b <- rnorm(n = 1000, mean = 0, sd = .5)
qqplot(a, b)
shapiro.test(b)
b <- rnorm(n = 100, mean = 0, sd = .5)
shapiro.test(b)
qqplot(a, b)
b <- rnorm(n = 100, mean = 0, sd = 1)
shapiro.test(b)
qqplot(a, b)
b <- rnorm(n = 100, mean = 0, sd = 10)
shapiro.test(b)
density(a)
qqplot(a, b)
qqplot(a, b, ylim = c(-20,20))
qqplot(a, b, ylim = c(-30,30))
ppplot(a, b, ylim = c(-30,30))
pplot(a, b, ylim = c(-30,30))
qqplot(a, b, ylim = c(-30,30))
a <- rnorm(n = 1000, mean = 0, sd = 10)
b <- rnorm(n = 50, mean = 0, sd = 10)
shapiro.test(b)
qqplot(a, b, ylim = c(-30,30))
qqplot(a, b)
qqplot(a, b, ylim = c(-30, 30))
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 50, mean = 10, sd = 10)
shapiro.test(b)
density(a)
qqplot(a, b, ylim = c(-40, 40))
shapiro.test(b)
shapiro.test(a)
shapiro.test(b)
b <- rnorm(n = 5, mean = 10, sd = 10)
shapiro.test(b)
b <- rnorm(n = 5, mean = 0, sd = 10)
shapiro.test(b)
df <- as.data.frame(c(a, b))
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
install.packages("tidyverse")
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 5000, mean = 0, sd = 10)
shapiro.test(b)
density(a)
density(b)
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 5000, mean = 0, sd = 1000)
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 5000, mean = 0, sd = 100)
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 5000, mean = 0, sd = 10)
a <- rnorm(n = 1000, mean = 0, sd = 14)
b <- rnorm(n = 5000, mean = 0, sd = 7.5)
qqplot(a, b, ylim = c(-40, 40))
library(ggplot2)
df <- as.data.frame(c(a, b))
ggplot(df, aes(x = a, y = ..density..)) + geom_density(alpha .3, col = "red") + geom_density(inherit.aes = FALSE, data = df, x = b, y = ..density)
ggplot(df, aes(x = a, y = ..density..)) +
geom_density(alpha .3, col = "red") +
geom_density(
inherit.aes = FALSE,
data = df,
x = b,
y = ..density.., alpha = .3)
ggplot(df, aes(x = a, y = ..density..)) +
geom_density(alpha .3, col = "red") +
geom_density(
inherit.aes = FALSE,
data = df,
x = b, alpha = .3)
ggplot(df, aes(x = a)) +
geom_density(alpha .3, col = "red") +
geom_density(
inherit.aes = FALSE,
data = df,
x = b, alpha = .3)
library(ggplot2)
ggplot(df, aes(x = a)) +
geom_density(alpha .3, col = "red") +
geom_density(
inherit.aes = FALSE,
data = df,
x = b, alpha = .3)
ggplot(df, aes(x = a)) +
geom_density(alpha .3, col = "red")
ggplot(df, aes(x = a)) +
geom_density(col = "red")
a <- rnorm(n = 1000, mean = 0, sd = 14)
b <- rnorm(n = 5000, mean = 0, sd = 7.5)
df <- as.data.frame(c(a, b))
shapiro.test(b)
density(b)
qqplot(a, b, ylim = c(-40, 40))
library(ggplot2)
ggplot(df, aes(x = a)) +
geom_density(col = "red")
+
install.packages("markovchain")
install.packages(c("backports", "Cairo", "callr", "compositions", "digest", "dplyr", "factoextra", "forecast", "fs", "gdtools", "glue", "greybox", "igraph", "isoband", "jsonlite", "lme4", "lubridate", "mclust", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "reshape2", "rlang", "robustbase", "smooth", "stringi", "survey", "tibble", "tidyselect", "tinytex", "vctrs", "xfun", "xml2"))
minmax.norm <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
# for (i in 1:ncol(dfnum)) {
#   for (j in 1:nrow(dfnum)) {
#     dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
#   }
# }
dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
# for (i in 1:ncol(dfnum)) {
#   for (j in 1:nrow(dfnum)) {
#     dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
#   }
# }
dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
rnorm(100)
t <- rnorm(100)
minmax.norm(t)
t <- as_tibble(rnorm(100))
minmax.norm(t)
t1 <- minmax.norm(t)
# Min-Max Normalization, Keep = 'Variable', for Numeric variable
# to not be transformed
minmax.norm <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
t2 <- minmax.norm(t)
t2
t1 == t2
t1 - t2
# Min-Max Normalization, Keep = 'Variable', for Numeric variable
# to not be transformed
minmax.norm1 <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
# Min-Max Normalization, Keep = 'Variable', for Numeric variable
# to not be transformed
minmax.norm1 <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
for (i in 1:ncol(dfnum)) {
for (j in 1:nrow(dfnum)) {
dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
}
}
# dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
minmax.norm2 <- function(df, Keep = NULL) {
require(tidyverse)
if(is.null(Keep)){
index <- names(df)
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
normalize <- function(x) {
return ((x - min(x, na.rm = TRUE)) / (max(x, na.rm = T) - min(x, na.rm = T)))
}
# for (i in 1:ncol(dfnum)) {
#   for (j in 1:nrow(dfnum)) {
#     dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
#   }
# }
dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, dfnum))
df %>%
select(all_of(index))
} else {
index <- names(df)
k <- df %>%
select(all_of(Keep))
df <- df %>%
select(-all_of(Keep))
dflabs <- df[,!sapply(df, is.numeric)]
dfnum <- df[,sapply(df, is.numeric)]
# for (i in 1:ncol(dfnum)) {
#   for (j in 1:nrow(dfnum)) {
#     dfnum[j,i] <- (dfnum[j,i] - min(dfnum[,i], na.rm = T))/(max(dfnum[,i], na.rm = T) - min(dfnum[,i], na.rm = T))
#   }
# }
dfnum <- sapply(dfnum, normalize)
df <- as_tibble(cbind(dflabs, k, dfnum))
df %>%
select(all_of(index))
}
}
t <- rnorm(10)
t1 <- rnorm(100)
t2 <- rnorm(1000)
minmax.norm1(t)
minmax.norm1(tibble(t))
minmax.norm2(tibble(t))
minmax.norm2(tibble(t)) - minmax.norm1(tibble(t))
options(digits = 5)
minmax.norm2(tibble(t)) - minmax.norm1(tibble(t))
minmax.norm1(tibble(t))
minmax.norm2(tibble(t))
minmax.norm2(tibble(t)) - minmax.norm1(tibble(t))
t
mean(minmax.norm2(tibble(t1)) - minmax.norm1(tibble(t2)))
mean(minmax.norm2(tibble(t2)) - minmax.norm1(tibble(t2)))
mean(minmax.norm2(tibble(t2)) - minmax.norm1(tibble(t1)))
mean(minmax.norm2(tibble(t1)) - minmax.norm1(tibble(t1)))
mean(minmax.norm2(tibble(t1)) == minmax.norm1(tibble(t1)))
mean(minmax.norm2(tibble(t2)) == minmax.norm1(tibble(t2)))
mean(minmax.norm2(tibble(t3)) == minmax.norm1(tibble(t3)))
mean(minmax.norm2(tibble(t)) == minmax.norm1(tibble(t)))
t3 <- rnorm(10000)
mean(minmax.norm2(tibble(t3)) == minmax.norm1(tibble(t3)))
mean(minmax.norm2(tibble(t3)) == minmax.norm1(tibble(t3)))
install.packages('scheduler')
install.packages('taskscheduleR')
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
version
install.packages('benchmarkme')
library(benchmarkme)
res <- benchmark_std(runs = 3)
plot(res)
benchmarkme::get_cpu()
getwd()
library(parallel)
detectCores()
detectCores(logical = F)
install.packages('moderndive')
#####
# Mineral Group Classification by Random Forest
#
# version: 1.0 (2020/05/20)
#
# Last modifications:
#
# -----
# Amphiboles, Apatites, Carbonates, Clay Minerals, Feldspars, Feldspathoides,
# Garnets, Ilmenites, Micas, Olivines, Perovskites, Pyroxenes, Quartz, Sulfides,
# Titanite, Zircon
# -----
# Guilherme Ferreira, (guilherme.ferreira@cprm.gov.br)
# May, 2020
#####
#####
# Setting up the enviroment
#####
setwd("C:/Users/GUILHERMEFERREIRA-PC/Documents/GitHub/MinChem_Modeller") # defining the work direction
set.seed(123) # defining the 'random state' of the pseudo-random generator
library(Cairo) # Export figures
library(tidyverse) # Collection of libraries: dplyr, ggplot2, purrr, tidyr. Data wrangling and visualizing
library(ggthemes) # Predefined themes
library(caret) # Machine Learning Toolkit
library(randomForest) # Random Forest library
library(factoextra)
minerals <- read_csv('data_input/minerals.csv') %>% # Read file and associate to an object
select(1,47,19,14,3,25:46) %>% # select and reorder the columns
mutate(id = X1, X1 = NULL) %>% # Rename Column
mutate(AS_ppm = ifelse(AS_ppm > 100, AS_ppm/10000, # Adjusting values of column
ifelse(AS_ppm > 50, AS_ppm/10, AS_ppm))) %>%
mutate(AS = AS_ppm, AS_ppm = NULL, # Rename columns
ROCK = `ROCK NAME`, `ROCK NAME` = NULL,
SAMPLE = `SAMPLE NAME`, `SAMPLE NAME` = NULL) %>%
select(24,27, 1:2,26, 3:23,25) # Reorder Columns
apatite <- minerals %>% filter(MINERAL == 'APATITE')
View(apatite)
apatite %>%
ggplot(aes(x = CL, y = F)) +
geom_point()
apatite %>%
ggplot(aes(x = CL, y = F, col = H2O)) +
geom_point()
names(apatite)
apatite %>%
ggplot(aes(x = CL, y = F, col = H20)) +
geom_point()
apatite %>%
ggplot(aes(x = CL, y = F, col = H20)) +
geom_point() +
scale_color_viridis_c()
names(apatite)
apatite %>%
ggplot(aes(x = CL, y = F, col = H20)) +
geom_point(aes(size = H20)) +
scale_color_viridis_c()
minerals %>%
filter(MINERAL == 'CLINOENSTATITE') %>%
count()
View(minerals)
sort(unique(minerals$MINERAL))
minerals %>%
filter(MINERAL == 'CHROME-SPINEL') %>%
count()
cr_spinel <- minerals %>%
filter(MINERAL == 'CHROME-SPINEL' |
MINERAL == 'CHROMITE' )
cr_spinel %>%
ggplot(aes(x = CR2O3, y = AL2O3, col = MINERAL)) +
geom_point()
minerals %>%
filter(MINERAL == 'GLAUCONITE') %>%
count()
cr_spinel <- minerals %>%
filter(MINERAL == 'CHROME-SPINEL' |
MINERAL == 'CHROMITE' |
MINERAL == 'SPINEL')
cr_spinel %>%
ggplot(aes(x = CR2O3, y = AL2O3, col = MINERAL)) +
geom_point()
cr_spinel %>%
ggplot(aes(x = CR2O3, y = AL2O3, col = MINERAL)) +
geom_point()
cr_spinel %>%
ggplot(aes(x = CR2O3, y = AL2O3, col = MINERAL)) +
geom_point(alpha = .5)
cr_spinel %>%
ggplot(aes(x = CR2O3, y = AL2O3, col = MINERAL)) +
geom_point(alpha = .5)
cr_spinel %>%
filter(MINERAL == 'SPINEL') %>%
ggplot(aes(x = MGO, y = AL2O3, col = FEOT)) +
geom_point()
cr_spinel %>%
filter(MINERAL == 'SPINEL') %>%
ggplot(aes(x = MGO, y = AL2O3, col = FEOT)) +
geom_point()
cr_spinel %>%
filter(MINERAL == 'SPINEL') %>%
ggplot(aes(x = MGO, y = AL2O3, col = FEOT)) +
geom_point() +
scale_color_viridis_c()
cr_spinel %>%
filter(MINERAL == 'SPINEL') %>%
ggplot(aes(x = MGO, y = CR2O3, col = FEOT)) +
geom_point() +
scale_color_viridis_c()
minerals %>%
filter(MINERAL == 'KALIOPHILITE') %>%
count()
minerals %>%
filter(MINERAL == 'KALSILITE') %>%
count()
minerals %>%
filter(MINERAL == 'KATOPHORITE') %>%
count()
minerals %>%
filter(MINERAL == 'KATOPHORITE') %>%
ggplot(aes(x = FEOT, y = MGO)) +
geom_point()
minerals %>%
filter(MINERAL == 'KATOPHORITE') %>%
ggplot(aes(x = FEOT, y = `F`)) +
geom_point()
minerals %>%
filter(MINERAL == 'PHENGITE') %>%
count()
minerals %>%
filter(MINERAL == 'CELADONITE') %>%
count()
minerals %>%
filter(MINERAL == 'MUSCOVITE') %>%
count()
minerals %>%
filter(MINERAL == 'MUSCOVITE' |
MINERAL == 'CELADONITE' |
MINERAL == 'PHENGITE') %>%
ggplot(aes(x = K2O, y = MGO, col = AL2O3)) +
geom_point()
minerals %>%
filter(MINERAL == 'MUSCOVITE' |
MINERAL == 'CELADONITE' |
MINERAL == 'PHENGITE') %>%
ggplot(aes(x = K2O, y = MGO, col = AL2O3)) +
geom_point() +
scale_color_viridis_c()
minerals %>%
filter(MINERAL == 'MUSCOVITE' |
MINERAL == 'CELADONITE' |
MINERAL == 'PHENGITE') %>%
ggplot(aes(x = K2O, y = MGO, col = MINERAL)) +
geom_point()
minerals %>%
filter(MINERAL == 'MUSCOVITE' |
MINERAL == 'CELADONITE' |
MINERAL == 'PHENGITE') %>%
ggplot(aes(x = K2O, y = MGO, col = MINERAL)) +
geom_point(alpha = .4)
minerals %>%
filter(MINERAL == 'MUSCOVITE' |
MINERAL == 'CELADONITE') %>%
ggplot(aes(x = K2O, y = MGO, col = MINERAL)) +
geom_point(alpha = .4)
minerals %>%
filter(MINERAL == 'SPURRITE') %>%
count()
